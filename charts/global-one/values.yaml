## Default values for global-one.
Default_Values-And-Instructions: "https://github.com/MaxTarasenko/helm-global-templates/blob/main/charts/global-one/values.yaml"
## -----------------------------------------------------------------------------------------------------------------------------



# BEGIN--------------------------- Standard config ------------------------
clusterDomain: cluster.local

image:
## --- with 'env' used [repository/env/name:tag] ---
#  env: ""
## --- with only 'repository' without 'env' used [repository/name:tag]
#  repository: ""
## --- with only 'name' used [name:tag]
  name: nginx
  tag: "latest"
#  pullPolicy: Always # Default
#  pullSecrets: [] # imagePullSecrets

#replicaCount: 1

#podAnnotations: {}
#podLabels: {}
#nodeSelector: {}
#tolerations: []
#affinity: {}

#command: ["python", "-m"]
#args: ["my-app", "--arg1", "value1"]
# END--------------------------- Standard config ------------------------



# BEGIN--------------------------- Strategy config ------------------------
#strategy: # Default RollingUpdate
#  type: RollingUpdate # or Recreate (without rollingUpdate settings)
#  rollingUpdate:
#    maxSurge: "25%" # Default 25
#    maxUnavailable: "25%" # Default 25
# BEGIN--------------------------- Strategy config ------------------------



# BEGIN--------------------------- ENV Variables ------------------------
#env: # Default {}
## Set with simple value
#  DB_HOST: "host"
## Set with secret
#  DB_PASS:
#    secret:
#      name: "db-secrets"
#      key: "password"
## Set url to service with cluster local
#  SERVICE_URL: # http://{{.service_url.name}}.{{$.Release.Namespace}}.svc.{{.service_url.cluster}}:{{.service_url.port}}{{.service_url.path}}
#    service_url:
#      name: "auth"
#      port: "8080"
#      cluster: "cluster.local" # Default
#      path: "" # Default
# END--------------------------- ENV Variables ------------------------



# BEGIN--------------------------- Resources config ------------------------
#resources: # Default {}
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi
# END--------------------------- Resources config ------------------------



# BEGIN--------------------------- Service and Ingress ------------------------
#service:
#  metrics:
#    port: 9090
#  http:
#    port: 80
#    type: NodePort # Default ClusterIP or (LoadBalancer/NodePort)
#    nodePort: 3000 # Default disable and random create
#    protocol: TCP # Default
##   For create separate service
#    separate: true
##   For enable headless service without ip for service
#    headless: true
##   For enable health check
#    healthCheck: # Default disabled
#      enabled: true
#      path: / # Default [/]
#      initialDelaySeconds: 2 # Default [2]
#      periodSeconds: 10 # Default [10]
#      timeoutSeconds: 5 # Default [5]
#      failureThreshold: 5 # Default [5]
#      livenessProbe:
#        enabled: true
#        path: / # Optional (priority)
#        initialDelaySeconds: 50 # Optional (override common)
#        periodSeconds: 30 # Optional (override common)
#        timeoutSeconds: 20 # Optional (override common)
#        failureThreshold: 10 # Optional (override common)
#      readinessProbe:
#        enabled: true
#        path: / # Optional (priority)
#        initialDelaySeconds: 50 # Optional (override common)
#        periodSeconds: 30 # Optional (override common)
#        timeoutSeconds: 20 # Optional (override common)
#        failureThreshold: 10 # Optional (override common)
##   For enable ingress and create
#    ingress:
#      enabled: true # Default false
#      annotations: # Default {}
#        kubernetes.io/ingress.class: alb
#      className: "" # Default
#      host: example.com # Default | only single
#      hosts: # Default [] for multi or single host | overwrite host
#        - example1.com # Example
#        - example2.com # Example
#      path: / # Default
#      pathType: Prefix # Default
#      annotations: {} # Default
#      tls: false # Default
#      existingSecret: "custom-tls"
#      existingSecrets:
#        example2.com: "custom-tls"
##   For enable NetworkPolicy and create
#    networkPolicy:
#      enabled: true # Default false
#      useDefaultPolicy: true # Default true, allows access only from the current namespace
#      allowFromAllNamespaces: false # Default false, allows you to control access permission from all namespaces# policyTypes: [“Ingress”, “Egress”] # Default [“Ingress”].
#      ingressAllowAllPods: false # Allow all pods ingress
#      egressAllowAllPods: false # Allow all pods egress
#      ipList:
#        - 1.1.1.1 # /32 Default prefix
#        - 192.168.0.0/16 # or set self mask
##   Istio config (not implemented)
#    istio:
#      virtualService:
#        - name: http
#          hosts:
#            - my-app.example.com
#          gateways:
#            - ingressgateway
#          http:
#            - match:
#                - uri:
#                    prefix: /
#              route:
#                - destination:
#                    host: my-app
#                    port: 8080
#      destinationRule:
#        - name: http
#          host: my-app
#          trafficPolicy:
#            tls:
#              mode: ISTIO_MUTUAL
#      gateway:
#        - name: ingressgateway
#          selector:
#            istio: ingressgateway
#          servers:
#            - port:
#                number: 443
#                name: https
#                protocol: HTTPS
#              hosts:
#                - my-app.example.com
#              tls:
#                credentialName: my-custom-secret # Указать, если используете собственный секрет
#                mode: SIMPLE # SIMPLE для HTTPS с TLS
# END--------------------------- Service and Ingress ------------------------



# BEGIN--------------------------- ConfigMap ------------------------
#configMap: # Default []
## [Example] Loads the contents of the files (config1.txt, config2.txt) and outputs them to ConfigMap.
#  - name: config-with-file
#    dataFiles:
#      - "files/config1.txt"
#      - "files/config2.txt"
## For static value keys
#  - name: config-with-inline
#    dataInline:
#      allowed: "true"
#      enemies: "aliens"
#      lives: "3"
## For complex multi-line data
#  - name: config-with-custom
#    data:
#      game.properties: |
#        enemies=aliens
#        lives=3
#        enemies.cheat=true
#        enemies.cheat.level=noGoodRotten
#        secret.code.passphrase=UUDDLRLRBABAS
#        secret.code.allowed=true
#        secret.code.lives=30
#      ui.properties: |
#        color.good=purple
#        color.bad=yellow
#        allow.textmode=true
#        how.nice.to.look=fairlyNice
# END--------------------------- ConfigMap ------------------------



# BEGIN--------------------------- Init Containers config ------------------------
## For init container
#initContainers: # Default []
#  - name: my-init-container
#    image:
#      repository: my-repo
#      name: my-init-app
#      tag: latest
#    env:
#      # Set with simple value
#      INIT_DB_HOST: "init-default-host"
#      INIT_DB_USER: "init-default-user"
#      # Set with secret
#      INIT_DB_PASS:
#        secret:
#          name: "init-default-secrets"
#          key: "init-default-password"
# END--------------------------- Init Containers config ------------------------



# BEGIN---------------------------PVC config ------------------------
#pvc: # Default []
## For Create PVC and Connect to Deployment
#  create:
#    - name: app-data
#      size: "1Gi" # Default
#      mountPath: '/app/data' # For Connect to Container
#      storageClassName: "" # Default
#      annotations: {} # Default
#      accessModes:
#        - "ReadWriteOnce" # Default
#      selector: {} # Default
#      matchLabels: {} # Default
## Connect to Deployment
#  connect:
#    - name: app-data-created
#      mountPath: '/app/data' # For Connect to Container
# END---------------------------PVC config ------------------------



# BEGIN--------------------------- Mounts (secret/configMap) ------------------------
#volume: # Default []
## Connect 'secret'
#  - name: gateway-private-key
#    secret:
#      secretName: gateway-private-key
## Connect 'configMap'
#  - name: dockovpn-config
#    configMap:
#      name: dockovpn-config
# END--------------------------- Mounts (secret/configMap) --------------------------



# BEGIN--------------------------- Mounts volumes to container ------------------------
## Mounts volumes to container when one container
#volumeMounts: # Default []
#  - name: gateway-private-key
#    mountPath: /keys/private.key
#    subPath: gateway-private-key
#  - name: dockovpn-config
#    mountPath: /opt/Dockovpn/config
#    subPath: server.conf
# END--------------------------- Mounts volumes to container ------------------------



# BEGIN--------------------------- LifeCycle config ------------------------
#lifecycle: # Default {}
#  preStop:
#    exec:
#      command: ["/bin/sh","-c","/usr/sbin/nginx -s quit"]
#  postStart:
#    exec:
#      command: ["/bin/sh","-c","/usr/sbin/nginx -s reload"]
# END--------------------------- LifeCycle config ------------------------



# BEGIN--------------------------- AutoScaling config ------------------------
#autoscaling:
#  enabled: true # Default false (or true - disable replicas and enable autoscaling)
#  minReplicas: 1 # Default
#  maxReplicas: 3 # Default
#  metrics: # Default (CPU/Utilization/80)
#    - name: cpu
#      type: Utilization
#      value: 80
#    - name: memory
#      type: Utilization
#      value: 80
#  behavior: # Default disable
#    scaleUp:
#      - type: Pods # or Percent
#        value: 1
#        periodSeconds: 15
#    scaleDown:
#      - type: Pods # or Percent
#        value: 1
#        periodSeconds: 60
# END--------------------------- AutoScaling config ------------------------



# BEGIN--------------------------- Container Security Context config ------------------------
#containerSecurityContext: # Default {}
#  seccompProfile:
#    type: RuntimeDefault
#  appArmorProfile:
#    localhostProfile: nodejs-basic # Example
#    type: Localhost
#  allowPrivilegeEscalation: false # Prohibits escalation of privileges
#  runAsNonRoot: true              # Prohibits running as root
#  readOnlyRootFilesystem: true    # Read-only file system
#  runAsUser: 1000                 # Run as user ID 1000
#  capabilities:
#    drop:
#      - ALL                       # Disabling all Linux privileges
# END--------------------------- Container Security Context config ------------------------



# BEGIN--------------------------- Pod Security Context config ------------------------
#podSecurityContext: # Default {}
#  fsGroup: 2000 # A group to manage the file system
# END--------------------------- Pod Security Context config ------------------------



# BEGIN--------------------------- CronJob ------------------------
#cronjobs: [] # Default
## Example
#  - name: cron-1
#    enabled: false
#    system: false
#    image: busybox
#    schedule: "*/5 * * * *"
#    args: [ "echo starting; echo done;" ]
#    env:
#      test1: "test"
#      test2:
#        secret:
#          name: "test"
#          key: "test"
#  - name: cron-2
#    enabled: false
#    system: true
#    schedule: "*/5 * * * *"
#    args: [ "echo starting; echo done;" ]
## Default
#    nodeSelector: {}
#    restartPolicy: OnFailure
#    imagePullPolicy: Always
#    ttlSecondsAfterFinished: 60
# END--------------------------- CronJob ------------------------

# BEGIN--------------------------- Pod Disruption Budget ------------------------
# podDisruptionBudget:
#   enabled: false
#   minAvailable: 1  # Minimum number of pods that must be available during voluntary disruptions
#   maxUnavailable: 1  # Maximum number of pods that can be unavailable during voluntary disruptions
#   ## NOTE: Use either minAvailable OR maxUnavailable, not both
#   annotations: {}  # Additional annotations for the PodDisruptionBudget
# END--------------------------- Pod Disruption Budget ------------------------



# BEGIN--------------------------- Pod Migration Sidecar ------------------------
# # pod migration sidecar for migration pods between nodes if node is not available
# podMigrationSidecar:
#   enabled: true
#   image:
#     repository: mrmerseri/pod-migration-sidecar # default
#     tag: latest # default
#     pullPolicy: IfNotPresent # default
#   resources: {} # default
  # checkInterval: 10 # default 5 minutes
# END--------------------------- Pod Migration Sidecar ------------------------



# BEGIN--------------------------- Service Account config ------------------------
# # Create ServiceAccount
# serviceAccount:
#   create: true
#   annotations: {}
# # Create Role/ClusterRole and Bindings
# rbac:
#   create: true
#   # Namespace-scoped permissions
#   roles:
#     - name: "pod-reader"
#       rules:
#         - apiGroups: [""]
#           resources: ["pods"]
#           verbs: ["get", "list", "watch", "delete"]
#         - apiGroups: ["apps"]
#           resources: ["replicasets"]
#           verbs: ["get", "list", "watch"]

#   # Cluster-scoped permissions
#   clusterRoles:
#     - name: "node-viewer"
#       rules:
#         - apiGroups: [""]
#           resources: ["nodes"]
#           verbs: ["get", "list", "watch"]
# END--------------------------- Service Account config ------------------------



# BEGIN--------------------------- Pod Anti Affinity config ------------------------
## For distribute pods across different nodes or zones or regions
#podAntiAffinity:
#  enabled: true
#  type: "soft" # default / or "hard"
#  topologyKey: "kubernetes.io/hostname" # default / Available options:
#    # "kubernetes.io/hostname" - distribute pods across different nodes
#    # "topology.kubernetes.io/zone" - distribute pods across different availability zones
#    # "topology.kubernetes.io/region" - distribute pods across different regions
#  labelSelector:
#    matchLabels:
#      app.kubernetes.io/name: "{{ .Release.Name }}"
#      app.kubernetes.io/instance: "{{ .Release.Name }}"
#  weight: 100 # default / only used when type is "soft"
# END--------------------------- Pod Anti Affinity config ------------------------