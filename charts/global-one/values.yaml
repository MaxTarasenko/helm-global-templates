# Default values for global-one.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

configMap: []
#  - name: config
#    data:
#      game.properties: |
#        enemies=aliens
#        lives=3
#        enemies.cheat=true
#        enemies.cheat.level=noGoodRotten
#        secret.code.passphrase=UUDDLRLRBABAS
#        secret.code.allowed=true
#        secret.code.lives=30
#      ui.properties: |
#        color.good=purple
#        color.bad=yellow
#        allow.textmode=true
#        how.nice.to.look=fairlyNice
#
#  - name: config-env-file
#    data:
#      allowed: '"true"'
#      enemies: aliens
#      lives: "3"
#
#  - name: config-3
#    data:
#      game-special-key: |
#        enemies=aliens
#        lives=3
#        enemies.cheat=true
#        enemies.cheat.level=noGoodRotten
#        secret.code.passphrase=UUDDLRLRBABAS
#        secret.code.allowed=true
#        secret.code.lives=30
#
#  - name: config-4
#    data:
#      "config.yml": |
#        web:
#          request_logging: false

replicaCount: 1

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: "25%"
    maxUnavailable: "25%"

image:
  repository:
  env:
  name: nginx
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

#command: ["python", "-m"]
#args: ["my-app", "--arg1", "value1"]

# If you need one container
env: {}
#  # Set with simple value
#  DB_HOST: "host"
#  # Set with secret
#  DB_PASS:
#    secret:
#      name: "db-secrets"
#      key: "password"
#  # Set url to service with cluster local
#  SERVICE_URL:
#    service_url:
#      name: "auth"
#      port: "8080"


# If you need multiple containers
containers: []
#  - name: container1
#    image:
#      repository: repo1
#      name: name1
#      tag: tag1
#    command: ["python", "-m"]
#    args: ["my-app", "--arg1", "value1"]
#    env:
#      # Set with simple value
#      DB_HOST: "default-host"
#      DB_USER: "default-user"
#      # Set with secret
#      DB_PASS:
#        secret:
#          name: "default-secrets"
#          key: "default-password"
#  - name: container2
#    image:
#      repository: repo2
#      name: name2
#      tag: tag2
#    command: ["python", "-m"]
#    args: ["my-app", "--arg1", "value1"]
#    env:
#      # Set with simple value
#      DB_HOST: "default-host"
#      DB_USER: "default-user"
#      # Set with secret
#      DB_PASS:
#        secret:
#          name: "default-secrets"
#          key: "default-password"

## For init container
initContainers: []
#  - name: my-init-container
#    image:
#      repository: my-repo
#      name: my-init-app
#      tag: latest
#    env:
#      # Set with simple value
#      INIT_DB_HOST: "init-default-host"
#      INIT_DB_USER: "init-default-user"
#      # Set with secret
#      INIT_DB_PASS:
#        secret:
#          name: "init-default-secrets"
#          key: "init-default-password"

## Connect volumes in the Deployment
#connectVolume: [] # Default
## Create PVC
#  - name: dockovpn-data
#    persistentVolumeClaim:
#      claimName: dockovpn-data
#      storageClassName: "" # Default
#      size: "1Gi" # Default
#      annotations: {} # Default
#      accessModes: "" # Default 'ReadWriteOnce'
#      selector: {} # Default
#        matchLabels: {} # Default
## Connect 'secret'
#  - name: gateway-private-key
#    secret:
#      secretName: gateway-private-key
## Connect 'configMap'
#  - name: dockovpn-config
#    configMap:
#      name: dockovpn-config

## Mounts volumes to container when one container
volumeMounts: []
#  - name: gateway-private-key
#    mountPath: /keys/private.key
#    subPath: gateway-private-key
#  - name: dockovpn-config
#    mountPath: /opt/Dockovpn/config
#    subPath: server.conf

lifecycle: {}
#  preStop:
#    exec:
#      command: ["/bin/sh","-c","/usr/sbin/nginx -s quit"]
# postStart:
#   exec:
#     command: ["/bin/sh","-c","/usr/sbin/nginx -s reload"]

healthCheck:
  livenessProbe:
    enable: false
    initialDelaySeconds: 90
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 5
  readinessProbe:
    enable: false
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 5
  path: /
  port: http

## Service and Ingress for service
service:
  - name: http
    port: 80
#    type: NodePort # Default
#    nodePort: 3000 # Default disable and random create
#    protocol: TCP # Default
## For enable headless service without ip for service
#    headless: true
## For enable ingress and create
#    ingress:
#      enabled: true # Default false
#      className: "" # Default
#      host: example.com # Default | only single
#      hosts: [] # Default for multi or single host | overwrite host
#        - example1.com # Example
#        - example2.com # Example
#      path: / # Default
#      pathType: ImplementationSpecific # Default
#      annotations: {} # Default
#      tls: true # Default
## For enable NetworkPolicy and create
#    networkPolicy:
#      enabled: true # Default false
#      useDefaultPolicy: true # Default true, allows access only from the current namespace
#      allowFromAllNamespaces: false # Default false, allows you to control access permission from all namespaces# policyTypes: [“Ingress”, “Egress”] # Default [“Ingress”].
#      ingressAllowAllPods: false # Allow all pods ingress
#      egressAllowAllPods: false # Allow all pods egress
#      ipList:
#        - 1.1.1.1 # /32 Default prefix
#        - 192.168.0.0/16 # or set self mask

## For enable NetworkPolicy and create
#    networkPolicy:
#      useDefaultPolicy: false # Use default policy for allow allow for podSelector/namespaceSelector
#      ipList:
#        - 1.1.1.1 # /32 Default prefix
#        - 192.168.0.0/16 # or set self mask

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  scaleUp:
    Pods:
      value: 1
      periodSeconds: 15
  scaleDown:
    Pods:
      value: 1
      periodSeconds: 60

imagePullSecrets: []

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

containerSecurityContext: {}
#  seccompProfile:
#    type: RuntimeDefault
#  capabilities:
#   drop:
#   - ALL
#  readOnlyRootFilesystem: true
#  runAsNonRoot: true
#  runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# --------------------------- CronJob ------------------------
cronjobs:
  - name: cron-1
    enabled: false
    system: false
    image: busybox
    schedule: "*/5 * * * *"
    args: [ "echo starting; echo done;" ]
    env:
      test1: "test"
      test2:
        secret:
          name: "test"
          key: "test"
  - name: cron-2
    enabled: false
    system: true
    schedule: "*/5 * * * *"
    args: [ "echo starting; echo done;" ]
    #--------Default--------
    #nodeSelector: {}
    #restartPolicy: OnFailure
    #imagePullPolicy: Always
    #ttlSecondsAfterFinished: 60
