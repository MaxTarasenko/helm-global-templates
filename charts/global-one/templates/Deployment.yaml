{{- $fullname := include "global-one.fullname" . -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "global-one.fullname" . }}
  labels:
    {{- include "global-one.labels" . | nindent 4 }}
spec:
  {{- if or (not .Values.autoscaling) (not .Values.autoscaling.enabled) }}
  replicas: {{ .Values.replicaCount | default 1 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "global-one.selectorLabels" . | nindent 6 }}
  {{ with .Values.strategy }}
  strategy:
    type: {{ .type | default "RollingUpdate" }}
    {{ with .rollingUpdate }}
    rollingUpdate:
      maxSurge: {{ .maxSurge | default "25%" }}
      maxUnavailable: {{ .maxUnavailable | default "25%" }}
    {{ end }}
  {{ end }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}

        {{- if .Values.configMap }}
        checksum/configmap: {{ include (print $.Template.BasePath "/ConfigMap.yaml") . | sha256sum }}
        {{- end }}

      labels:
        {{- include "global-one.labels" . | nindent 8 }}

        {{- with .Values.podLabels }}
        # Include podLabels
        {{- toYaml . | nindent 8 }}
        {{- end }}

    spec:

      # Connect volumes
      volumes:
        {{- if .Values.configMap }}
        {{- range .Values.configMap }}
        - name: {{ $fullname }}-{{ .name }}
          configMap:
            name: {{ $fullname }}-{{ .name }}
        {{- end }}
        {{- end }}

        {{- with .Values.pvc }}
        {{- range .create }}
        - name: {{ .name }}
          persistentVolumeClaim:
            claimName: {{ .name }}
        {{- end }}
        {{ range .connect }}
        - name: {{ .name }}
          persistentVolumeClaim:
            claimName: {{ .name }}
        {{- end }}
        {{- end }}

        {{- if and .Values.podMigrationSidecar .Values.podMigrationSidecar.enabled }}
        - name: kube-api-access
          projected:
            sources:
              - serviceAccountToken:
                  expirationSeconds: 3607
                  path: token
              - configMap:
                  name: kube-root-ca.crt
                  items:
                    - key: ca.crt
                      path: ca.crt
              - downwardAPI:
                  items:
                    - path: namespace
                      fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.namespace
            defaultMode: 420
        {{- end }}

      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if and .Values.serviceAccount .Values.serviceAccount.create }}
      serviceAccountName: {{ include "global-one.fullname" . }}
      {{- else if and .Values.podMigrationSidecar .Values.podMigrationSidecar.enabled }}
      serviceAccountName: {{ printf "%s-pod-migration-sidecar" $fullname }}
      {{- end }}

      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if and .Values.podAntiAffinity .Values.podAntiAffinity.enabled }}
      affinity:
        podAntiAffinity:
          {{- if eq .Values.podAntiAffinity.type "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- if .Values.podAntiAffinity.labelSelector }}
                  {{- toYaml .Values.podAntiAffinity.labelSelector | nindent 18 }}
                  {{- else }}
                  {{- include "global-one.selectorLabels" . | nindent 18 }}
                  {{- end }}
              topologyKey: {{ .Values.podAntiAffinity.topologyKey | default "kubernetes.io/hostname" }}
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.podAntiAffinity.weight | default 100 }}
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- if .Values.podAntiAffinity.labelSelector }}
                    {{- toYaml .Values.podAntiAffinity.labelSelector | nindent 20 }}
                    {{- else }}
                    {{- include "global-one.selectorLabels" . | nindent 20 }}
                    {{- end }}
                topologyKey: {{ .Values.podAntiAffinity.topologyKey | default "kubernetes.io/hostname" }}
          {{- end }}
      {{- end }}

      {{- if .Values.initContainers }}
      initContainers:
        {{- range .Values.initContainers }}
        - name: {{ .name }}
          image: "{{ .image.repository }}/{{ .image.name }}:{{ .image.tag }}"
          {{- if .env }}
          env:
            {{- range $name, $value := .env }}
            - name: {{ $name }}
              {{- if (typeOf $value) | eq "string" }}
              value: {{ $value | quote }}
              {{- else if $value.secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secret.name | quote }}
                  key: {{ $value.secret.key | quote }}
                {{- end }}
              {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}

      containers:
        - name: {{ include "global-one.fullname" . }}

          {{ with .Values.lifecycle }}
          lifecycle:
             {{ toYaml . | nindent 12 }}
          {{ end }}

          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          image: {{ include "global-one.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default "Always" }}
          {{- if .Values.command }}
          command:
            {{- toYaml .Values.command | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- toYaml .Values.args | nindent 12 }}
          {{- end }}
          {{- if .Values.env }}
          env:
            {{- include "global-one.env" . | nindent 12 }}
          {{- end }}

          volumeMounts:
            {{- with .Values.pvc }}
            {{- range .create }}
            {{- if .mountPath }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
            {{- end }}
            {{- end }}

            {{- range .connect }}
            {{- if .mountPath }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
            {{- end }}
            {{- end }}
            {{- end }}

          {{- range $name, $config := .Values.service }}
          ports:
            - name: {{ $name }}
              containerPort: {{ $config.port }}
              {{ if $config.protocol }}
              protocol: {{ $config.protocol }}
              {{ else }}
              protocol: TCP
              {{ end }}
          {{- end }}

          {{- $healthCheckDefined := false }}
          {{- range $name, $config := .Values.service }}
          {{- if and $config.healthCheck (not $healthCheckDefined) }}
          {{- $healthCheckDefined = true }}
          {{- $healthCheck := $config.healthCheck }}
          {{- if $healthCheck.enabled }}

          {{- if and $healthCheck.livenessProbe $healthCheck.livenessProbe.enabled | default $healthCheck.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ and $healthCheck.livenessProbe $healthCheck.livenessProbe.initialDelaySeconds | default $healthCheck.initialDelaySeconds | default 2 }}
            periodSeconds: {{ and $healthCheck.livenessProbe $healthCheck.livenessProbe.periodSeconds | default $healthCheck.periodSeconds | default 10 }}
            timeoutSeconds: {{ and $healthCheck.livenessProbe $healthCheck.livenessProbe.timeoutSeconds | default $healthCheck.timeoutSeconds | default 5 }}
            failureThreshold: {{ and $healthCheck.livenessProbe $healthCheck.livenessProbe.failureThreshold | default $healthCheck.failureThreshold | default 5 }}
            httpGet:
              path: {{ and $healthCheck.livenessProbe $healthCheck.livenessProbe.path | default $healthCheck.path | default "/" }}
              port: {{ $name }}
          {{- end }}

          {{- if and $healthCheck.readinessProbe $healthCheck.readinessProbe.enabled | default $healthCheck.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ and $healthCheck.readinessProbe $healthCheck.readinessProbe.initialDelaySeconds | default $healthCheck.initialDelaySeconds | default 2 }}
            periodSeconds: {{ and $healthCheck.readinessProbe $healthCheck.readinessProbe.periodSeconds | default $healthCheck.periodSeconds | default 10 }}
            timeoutSeconds: {{ and $healthCheck.readinessProbe $healthCheck.readinessProbe.timeoutSeconds | default $healthCheck.timeoutSeconds | default 5 }}
            failureThreshold: {{ and $healthCheck.readinessProbe $healthCheck.readinessProbe.failureThreshold | default $healthCheck.failureThreshold | default 5 }}
            httpGet:
              path: {{ and $healthCheck.readinessProbe $healthCheck.readinessProbe.path | default $healthCheck.path | default "/" }}
              port: {{ $name }}
          {{- end }}

          {{- end }}
          {{- end }}
          {{- end }}

          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}

      {{- with .Values.podMigrationSidecar }}
        - name: pod-migration-sidecar
          image: "{{ and .image .image.repository | default "mrmerseri/pod-migration-sidecar" }}:{{ and .image .image.tag | default "1.0.1" }}"
          imagePullPolicy: {{ and .image .image.pullPolicy | default "IfNotPresent" }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBERNETES_SERVICE_HOST
              value: kubernetes.default.svc
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
            - name: KUBERNETES_SERVICE_PORT_HTTPS
              value: "443"
            - name: KUBERNETES_SERVICE_PROTOCOL
              value: "https"
            - name: CHECK_INTERVAL_MINUTES
              value: {{ .checkInterval | default "5" | quote }}
          resources:
            {{- toYaml .resources | nindent 12 }}
          securityContext:
            capabilities:
              drop:
                - ALL
            privileged: false
            seLinuxOptions: {}
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: kube-api-access
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
      {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}